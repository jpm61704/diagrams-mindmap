* Features
** Easy encoding of nodes
** Coloring of nodes and edges
** Grouping of nodes and edges
** Use graphviz or manual layouts

* Restritions
** No partial functions
** Errors using Error types and Either datatype

* Goal
  Use this as a case study in proper levels of abstraction

* Progress
** December 28th, 2018
   Started project
   - implemented core data types
   - encoded example mindmap for testing
   Further Work
   - TODO Implement safety checks for topics and relations so that the relations
     only contain valid topics and topics don't have any repeats
   - NEXT Write diagrams function to layout topics in a cluster
     - Start with a function to print a single topic with its text, make sure 
       it automatically scales with text
       
** January 2nd, 2019
   GOAL Write layout functions for nodes
   COMPLETED grid layout function
   NEXT Write diagram function that takes layout and places the nodes
   
** January 3rd, 2019
   Writing function to print topic nodes
   Done.
   Now need to solve some problems: 
   - Getting the node to scale with text or the text to scale with nodes
     - Might need to use the rasterific backend to achieve this
     - See Diagrams.Backend.Rasterific.Text
   - Support shapes other than circles
   - constructors and composition functions for Layouts

** January 5th, 2019
   - Switching to rasterific for text-envelope support
   - Scaling text now works well and is centered
   - Added white background to read better
   NEXT add combinators for constructing custom layouts

